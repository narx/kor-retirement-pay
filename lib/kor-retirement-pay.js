'use strict';

/**
 * http://www.moel.go.kr/retirementpayCal.do 참조
 * 2018/5/16
 */

const moment = require('moment');

function get퇴직금({입사일, 퇴사일, 제외일수, 최근순3개월임금목록, 연상여금, 연차수당, 일일통상임금, 디버그}) {

  function 로깅(로그) {
    if (디버그) console.debug(로그);
  }

  const 재직일수 = get재직일수({입사일, 퇴사일, 제외일수});
  로깅(`재직일수 : ${재직일수}`);

  const 최근3개월임금 = get최근3개월임금({퇴사일, 최근순3개월임금목록});
  로깅(`최근3개월임금 :`);
  로깅(최근3개월임금);

  const 일일평균임금 = get일일평균임금({최근3개월임금, 연상여금, 연차수당});
  로깅(`일일평균임금 : ${일일평균임금}`);

  const 퇴직금 = (일일평균임금 > 일일통상임금 ? 일일평균임금 : 일일통상임금) * 30 * (재직일수 / 365);

  return Math.floor(퇴직금 * 100) / 100;
}

function get재직일수({입사일, 퇴사일, 제외일수}) {
  const 재직일수 = moment(퇴사일).diff(입사일, 'days') - 제외일수;
  return 재직일수;
}

function get일일평균임금({최근3개월임금, 연상여금, 연차수당}) {

  const 삼개월간임금총액 = 최근3개월임금.reduce((a, c) => a + c.임금, 0);
  const 삼개월간총일수 = 최근3개월임금.reduce((a, c) => a + c.일수, 0);
  
  const 상여금가산액 = 연상여금 * 0.25;
  const 연차수당가산액 = 연차수당 * 0.25;
  const 일일평균임금 = (삼개월간임금총액 + 상여금가산액 + 연차수당가산액) / 삼개월간총일수;

  return Math.ceil((Math.round(일일평균임금 * 1000) / 1000) * 100) / 100;
}

function get최근3개월임금({퇴사일, 최근순3개월임금목록}) {

  const 최근3개월임금 = [];

  const dateWrapper = moment(퇴사일);

  for (let i = 0 ; i < 4 ; i++) {

    dateWrapper.add(-1, 'd');
    const 종료일 = dateWrapper.toDate();
    dateWrapper.date(1);

    if (i === 3)
    {
      if (퇴사일.getDate() !== 1){
        dateWrapper.date(퇴사일.getDate());
      }
      else break;
    }

    const 시작일 = dateWrapper.toDate();

    const 일수 = moment(종료일).diff(시작일, 'days') + 1;

    if (i === 3 && 퇴사일.getDate() !== 1 && 최근순3개월임금목록.length !== 4) {
      throw Error("퇴사일이 1일이 아닌 경우, 최근순3개월임금목록의 길이는 4가 되어야 하며 마지막에는 일할계산된 3개월전 임금이 입력되어야 합니다. (" + moment(시작일).format('YYYY-MM-DD')+ ' ~ ' + moment(종료일).format('YYYY-MM-DD')+ '사이의 ' + 일수 + '간의 임금)');
    }

    const 임금 = 최근순3개월임금목록[i];

    최근3개월임금.push({
      시작일, 종료일, 일수, 임금
    });
  }
  return 최근3개월임금;
}


/**
 * https://financialfreedom.kr/%ED%87%B4%EC%A7%81%EC%86%8C%EB%93%9D%EC%84%B8-%EA%B3%84%EC%82%B0%EB%B2%95/ 참조
 */


const 과세표준표 = [
  { 과세표준: 0, 세율: 0.06 },
  { 과세표준: 12000000, 세율: 0.15 },
  { 과세표준: 46000000, 세율: 0.24 },
  { 과세표준: 88000000, 세율: 0.35 },
  { 과세표준: 150000000, 세율: 0.38 },
  { 과세표준: 500000000, 세율: 0.40 },
];

const 근속연수당공제액표 = [
  { 근속연수: 5, 공제액: 300000 },
  { 근속연수: 10, 공제액: 500000 },
  { 근속연수: 20, 공제액: 800000 },
  { 근속연수: 99, 공제액: 1200000 },
];

const 차등적용표 = [
  { 연도: 2016, 종전세법산출적용률:  0.8},
  { 연도: 2017, 종전세법산출적용률:  0.6},
  { 연도: 2018, 종전세법산출적용률:  0.4},
  { 연도: 2019, 종전세법산출적용률:  0.2},
]

function get퇴직소득세({입사일, 퇴사일, 퇴직금, 디버그}) {
  const 근속연수 = moment(퇴사일).diff(입사일, 'years');
  const 옛날계산법소득세 = get옛날계산법({ 근속연수, 퇴직금, 오배수여부: true });
  const 개정계산법소득세 = get개정계산법({ 근속연수, 퇴직금 });
  const 연도 = 퇴사일.getFullYear();

  let 종전세법산출적용률 = 0;

  if (연도 < 2016) 종전세법산출적용률 = 1;
  else if (연도 > 2019) 종전세법산출적용률 = 0;
  else {
    종전세법산출적용률 = 차등적용표.find(o => o.연도 == 연도).종전세법산출적용률;
  }

  return 옛날계산법소득세 * 종전세법산출적용률 + 개정계산법소득세 * (1 - 종전세법산출적용률);
}

function get옛날계산법({근속연수, 퇴직금, 오배수여부}) {

  let 공제액 = 퇴직금 * 0.4;

  let 누적근속연수당공제액 = 0;
  for (let i = 0 ; i < 근속연수 ; i++) {
    const 근속연수공제 = 근속연수당공제액표.find(o => o.근속연수 >= (i+1));
    누적근속연수당공제액 += 근속연수공제.공제액;
  }

  공제액 += 누적근속연수당공제액;

  let 최종과세표준 = (퇴직금 - 공제액) / 근속연수 * (오배수여부 ? 5 : 1);

  let 과세표준잔액 = 최종과세표준;
  let 환산산출세액 = 0;

  과세표준표.forEach((o, i) => {

    if (과세표준잔액 === 0 ) return;

    if (i === 과세표준표.length - 1) {
      환산산출세액 += 과세표준잔액 * o.세율;  
      return;
    }
    const o2 = 과세표준표[i + 1];

    let 차액 = (o2.과세표준 - o.과세표준);
    차액 = (차액 < 과세표준잔액 ? 차액 : 과세표준잔액);

    환산산출세액 += 차액  * o.세율;
    과세표준잔액 -= 차액;
  })

  // todo 12년도 이전 계산 누락됨
  const 연평균산출세액 = 환산산출세액 / 5;
  
  return 연평균산출세액 * 근속연수;
}

function get개정계산법({근속연수, 퇴직금}) {

  let 공제액 = 0;

  let 누적근속연수당공제액 = 0;
  for (let i = 0 ; i < 근속연수 ; i++) {
    const 근속연수공제 = 근속연수당공제액표.find(o => o.근속연수 >= (i+1));
    누적근속연수당공제액 += 근속연수공제.공제액;
  }

  공제액 += 누적근속연수당공제액;

  let 환산급여 = (퇴직금 - 공제액) / 근속연수 * 12;

  const 환산급여표 = [
    { 환산급여: 0, 공제율: 1 },
    { 환산급여: 8000000, 공제율: 0.6 },
    { 환산급여: 70000000, 공제율: 0.55 },
    { 환산급여: 100000000, 공제율: 0.45 },
    { 환산급여: 300000000, 공제율: 0.35 },
  ];

  let 계산공제액 = 0;
  let 환산급여잔액 = 환산급여;
  환산급여표.forEach((o, i) => {

    if (환산급여잔액 === 0 ) return;

    if (i === 환산급여표.length - 1) {
      계산공제액 += 환산급여잔액 * o.공제율;  
      return;
    }
    const o2 = 환산급여표[i + 1];

    let 차액 = (o2.환산급여 - o.환산급여);

    차액 = (차액 < 환산급여잔액 ? 차액 : 환산급여잔액);

    계산공제액 += 차액  * o.공제율;
    환산급여잔액 -= 차액;
  });

  let 최종과세표준 = 환산급여 - 계산공제액;

  let 과세표준잔액 = 최종과세표준;
  let 환산산출세액 = 0;

  과세표준표.forEach((o, i) => {

    if (과세표준잔액 === 0 ) return;

    if (i === 과세표준표.length - 1) {
      환산산출세액 += 과세표준잔액 * o.세율;  
      return;
    }
    const o2 = 과세표준표[i + 1];

    let 차액 = (o2.과세표준 - o.과세표준);
    차액 = (차액 < 과세표준잔액 ? 차액 : 과세표준잔액);

    환산산출세액 += 차액  * o.세율;

    과세표준잔액 -= 차액;
  });

  return 환산산출세액 * 근속연수 / 12;
}


module.exports = {
  get퇴직금,
  get재직일수,
  get일일평균임금,
  get최근3개월임금,
  get퇴직소득세
}